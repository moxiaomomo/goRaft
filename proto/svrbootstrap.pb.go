// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svrbootstrap.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PreJoinRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Client string `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
}

func (m *PreJoinRequest) Reset()                    { *m = PreJoinRequest{} }
func (m *PreJoinRequest) String() string            { return proto1.CompactTextString(m) }
func (*PreJoinRequest) ProtoMessage()               {}
func (*PreJoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PreJoinRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PreJoinRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PreJoinRequest) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type PreJoinResponse struct {
	Result   int64             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Message  string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Curnodes map[string]string `protobuf:"bytes,3,rep,name=curnodes" json:"curnodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PreJoinResponse) Reset()                    { *m = PreJoinResponse{} }
func (m *PreJoinResponse) String() string            { return proto1.CompactTextString(m) }
func (*PreJoinResponse) ProtoMessage()               {}
func (*PreJoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PreJoinResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *PreJoinResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PreJoinResponse) GetCurnodes() map[string]string {
	if m != nil {
		return m.Curnodes
	}
	return nil
}

func init() {
	proto1.RegisterType((*PreJoinRequest)(nil), "proto.PreJoinRequest")
	proto1.RegisterType((*PreJoinResponse)(nil), "proto.PreJoinResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DiscoveryAsBoot service

type DiscoveryAsBootClient interface {
	PreJoin(ctx context.Context, in *PreJoinRequest, opts ...grpc.CallOption) (*PreJoinResponse, error)
}

type discoveryAsBootClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryAsBootClient(cc *grpc.ClientConn) DiscoveryAsBootClient {
	return &discoveryAsBootClient{cc}
}

func (c *discoveryAsBootClient) PreJoin(ctx context.Context, in *PreJoinRequest, opts ...grpc.CallOption) (*PreJoinResponse, error) {
	out := new(PreJoinResponse)
	err := grpc.Invoke(ctx, "/proto.DiscoveryAsBoot/PreJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiscoveryAsBoot service

type DiscoveryAsBootServer interface {
	PreJoin(context.Context, *PreJoinRequest) (*PreJoinResponse, error)
}

func RegisterDiscoveryAsBootServer(s *grpc.Server, srv DiscoveryAsBootServer) {
	s.RegisterService(&_DiscoveryAsBoot_serviceDesc, srv)
}

func _DiscoveryAsBoot_PreJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAsBootServer).PreJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DiscoveryAsBoot/PreJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAsBootServer).PreJoin(ctx, req.(*PreJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiscoveryAsBoot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DiscoveryAsBoot",
	HandlerType: (*DiscoveryAsBootServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreJoin",
			Handler:    _DiscoveryAsBoot_PreJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svrbootstrap.proto",
}

func init() { proto1.RegisterFile("svrbootstrap.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xcd, 0x4e, 0xf3, 0x30,
	0x10, 0xfc, 0x52, 0x7f, 0x6d, 0x61, 0x11, 0x14, 0xad, 0xa0, 0xb2, 0x7a, 0xaa, 0x22, 0x0e, 0x3d,
	0xe5, 0x50, 0x2e, 0xa8, 0x5c, 0xf8, 0xbd, 0x20, 0x21, 0x55, 0x79, 0x83, 0x34, 0xac, 0x20, 0x22,
	0xf5, 0x06, 0xaf, 0x13, 0x29, 0xaf, 0xc7, 0x93, 0xa1, 0x38, 0x6e, 0x25, 0x2a, 0x4e, 0x9e, 0x99,
	0x5d, 0xcf, 0x8c, 0x0d, 0x28, 0x8d, 0xdd, 0x30, 0x3b, 0x71, 0x36, 0xab, 0x92, 0xca, 0xb2, 0x63,
	0x1c, 0xfa, 0x23, 0x5e, 0xc3, 0xd9, 0xda, 0xd2, 0x0b, 0x17, 0x26, 0xa5, 0xaf, 0x9a, 0xc4, 0x21,
	0xc2, 0x7f, 0x93, 0x6d, 0x49, 0x47, 0xf3, 0x68, 0x71, 0x9c, 0x7a, 0xdc, 0x69, 0x1f, 0x2c, 0x4e,
	0x0f, 0x7a, 0xad, 0xc3, 0x38, 0x85, 0x51, 0x5e, 0x16, 0x64, 0x9c, 0x56, 0x5e, 0x0d, 0x2c, 0xfe,
	0x8e, 0x60, 0xb2, 0xb7, 0x94, 0x8a, 0x8d, 0x50, 0xb7, 0x6b, 0x49, 0xea, 0xd2, 0x79, 0x57, 0x95,
	0x06, 0x86, 0x1a, 0xc6, 0x5b, 0x12, 0xc9, 0xde, 0x29, 0x58, 0xef, 0x28, 0xde, 0xc1, 0x51, 0x5e,
	0x5b, 0xc3, 0x6f, 0x24, 0x5a, 0xcd, 0xd5, 0xe2, 0x64, 0x79, 0xd5, 0x17, 0x4f, 0x0e, 0xbc, 0x93,
	0xc7, 0xb0, 0xf6, 0x6c, 0x9c, 0x6d, 0xd3, 0xfd, 0xad, 0xd9, 0x2d, 0x9c, 0xfe, 0x1a, 0xe1, 0x39,
	0xa8, 0x4f, 0x6a, 0xc3, 0xbb, 0x3a, 0x88, 0x17, 0x30, 0x6c, 0xb2, 0xb2, 0xde, 0x85, 0xf7, 0x64,
	0x35, 0xb8, 0x89, 0x96, 0xaf, 0x30, 0x79, 0x2a, 0x24, 0xe7, 0x86, 0x6c, 0x7b, 0x2f, 0x0f, 0xcc,
	0x0e, 0x57, 0x30, 0x0e, 0xd1, 0x78, 0x79, 0x58, 0xc5, 0xff, 0xdc, 0x6c, 0xfa, 0x77, 0xc3, 0xf8,
	0xdf, 0x66, 0xe4, 0x07, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x17, 0xbc, 0x75, 0x89,
	0x01, 0x00, 0x00,
}
